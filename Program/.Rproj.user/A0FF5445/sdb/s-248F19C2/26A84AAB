{
    "contents" : "require(shiny)\nrequire(ggplot2)\n\nshinyServer(function(input, output) {\n    a <- reactiveValues(data = NULL)\n    ##read input drop-down\n    formulaText <- reactive({\n      input$variable\n    })\n    \n    output$caption <- renderText({\n      paste(\"??ҿ?ʴ??ӹǹ\",formulaText(),\"?????Դ?غѵ??˵?㹪?ǧ??ȡ?Ż?????\")\n    })\n    \n    ##output UI [right]\n    output$main <- renderUI({\n      ##same CSS\n      \n      ##in summary case\n        list(\n          \n          wellPanel(\n            h2(\"Worker Setting\"),\n            sliderInput(\"slider_numworker\", label = h3(\"Number of Worker\"), min = 0, max = 100, value = 100),\n            sliderInput(\"slider_norprob\", label = h3(\"Normal-Worker Probability\"), min = 0, max = 100, value = 100),\n            sliderInput(\"slider_ratioadver\", label = h3(\"Ratio of Adversary\"), min = 0, max = 100, value = 0),\n            radioButtons(\"radio_advertype\", label = h3(\"Adversary-Worker Type\"),\n                         choices = list(\"Fixed-Answer Adversary : Normal\" = \"type1nor\", \"Fixed-Answer Adversary : Flood\" = \"type1flood\", \"Random Adversary\"= \"type2\" ,\"Perfect Adversary\" = \"type3\"), \n                         selected = \"type1nor\")),\n          \n          wellPanel(\n            h2(\"Problem Setting\"),\n            radioButtons(\"radio_problemtype\", label = h3(\"Problem Type\"),\n                         choices = list(\"Fixed-Problem : Normal\" = \"fixnor\", \"Fixed-Problem : Flood\" = \"fixflood\",\"Random Problem\" = \"random\", \"Real Problem\"= \"real\"), \n                         selected = \"fixnor\"),\n            sliderInput(\"slider_x\", label = h3(\"Number of X-axe\"), min = 1, max = 20, value = 1),\n            sliderInput(\"slider_y\", label = h3(\"Number of Y-axe\"), min = 1, max = 20, value = 1),\n            radioButtons(\"radio_level\", label = h3(\"Problem Label-Level\"),\n                         choices = list(\"2 Level\" = \"2level\", \"3 Level\" = \"3level\"), \n                         selected = \"2level\")),\n          \n          wellPanel(\n            h2(\"DataCenter Setting\"),\n            radioButtons(\"radio_datafusion\", label = h3(\"Data Fusion\"),\n                         choices = list(\"Majority Voting\" = \"mv\", \"EM Algorithm\" = \"em\"), \n                         selected = \"mv\"),\n            \n            radioButtons(\"radio_reputation\", label = h3(\"Reputaion Management\"),\n                         choices = list(\"None\" = \"none\",\"Simple Penalty\" = \"simple\", \"Soft Penalty\" = \"soft\",\"Hard Penalty\" = \"hard\"), \n                         selected = \"none\"),\n            \n            checkboxInput(\"checkbox_cut\", label = \"Do you use cut worker per round?\", value = TRUE),\n            \n            uiOutput(\"slide1\"),\n            \n            checkboxInput(\"checkbox_penalty\", label = \"Do you need to see panlty?\", value = TRUE)),\n          \n          actionButton(\"action_start\", label = \"Start Now\"),\n          actionButton(\"action_reset\", label = \"Reset\")\n          \n        )\n    })\n    \n    output$slide1 <- renderUI({\n      if(input$checkbox_cut == TRUE){\n        \n        sliderInput(\"slider_cutperround\", label = h3(\"Number of Cut Worker Per Round\"), min = 0, max = 100, value = 100)\n      }\n    })\n    \n    ##start button\n    observeEvent(input$action_start, {\n      init()\n      main()\n      go()\n    })\n    \n    ##reset buuton\n    observeEvent(input$action_reset, {\n      uiOutput(\"main\")\n    })\n    \n    \n    output$grid <- renderUI({\n      fluidRow(\n        column(6,\n          plotOutput(\"plot1\")\n        ),\n        column(6,\n          plotOutput(\"plot2\")\n        )\n      )\n    })\n    \n    output$plot1 <- renderPlot({\n      plot.a\n    })\n    \n    output$plot2 <- renderPlot({\n      plot.a\n    })\n\n    ##run netlogo by R \n    ##start here\n    init <- function(){\n      library(RNetLogo)\n      curDir <- getwd()\n      \n      nlDir <- \"C:/Program Files/NetLogo 5.3/app\"\n      setwd(nlDir)\n      \n      nl.path <- getwd()\n      NLStart(nl.path)\n      \n      model.path <- paste(curDir,\"marcs2.nlogo\",sep = \"/\")\n      NLLoadModel(model.path)\n    }\n    \n    main <- function(){\n      #parameter setup\n      ##set seperate x,y\n      area <<- c(input$slider_x,input$slider_y)\n      min.pxcor <<- NLReport(\"min-pxcor\")\n      min.pycor <<- NLReport(\"min-pycor\")\n      max.pxcor <<- NLReport(\"max-pxcor\")\n      max.pycor <<- NLReport(\"max-pycor\")\n      \n      setup()\n    }\n    \n    setup <- function(){\n      ##set parameter\n      ##for worker\n      NLCommand(paste(\"set\",\"number-workers\", input$slider_numworker )) \n      NLCommand(paste(\"set\",\"workers-probability\", input$slider_norprob )) \n      NLCommand(paste(\"set\",\"adversaries-rate\", input$slider_ratioadver )) \n      if(input$radio_advertype==\"type1nor\")\n      {\n        temp_advertype <- \"1. fixed : normal\"\n      }\n      else if(input$radio_advertype==\"fixflood\")\n      {\n        temp_advertype <- \"1. fixed : flood\"\n      }\n      else if(input$radio_advertype==\"random\")\n      {\n        temp_advertype <- \"2. random\"\n      }\n      else\n      {\n        temp_advertype <- \"3. perfect\"\n      }\n      print(temp_advertype)\n      \n      NLCommand(paste(\"set\",\"adversaries-type\", shQuote(temp_advertype))) \n      \n      \n      ##for problem\n      if(input$radio_problemtype==\"fixnor\")\n      {\n        temp_problemtype=\"normal\"\n      }\n      else if(input$radio_problemtype==\"fixflood\")\n      {\n        temp_problemtype=\"flood\"\n      }\n      else if(input$radio_problemtype==\"random\")\n      {\n        temp_problemtype=\"random\"\n      }\n      else\n      {\n        temp_problemtype=\"real\"\n      }\n      NLCommand(paste(\"set\",\"problem-label\", shQuote(temp_problemtype) )) \n      NLCommand(paste(\"set\",\"area.x\", input$slider_x )) \n      NLCommand(paste(\"set\",\"area.y\", input$slider_y ))\n      if(radio_level==\"2level\")\n      {\n        temp_level=\"2level\"\n      }\n      else\n      {\n        temp_level=\"3level\"\n      }\n      NLCommand(paste(\"set\",\"label-level\", shQuote(temp_level) )) \n      \n      \n      ##setup datacenter\n      if(input$radio_datafusion==\"mv\")\n      {\n        temp_datafusion=\"Majority Voting\"\n      }\n      else\n      {\n        temp_datafusion=\"EM Algorithm\"\n      }\n      NLCommand(paste(\"set\",\"data-fusion\", shQuote(temp_datafusion) )) \n      if(input$\"radio_reputation\"==\"none\")\n      {\n        temp_reputation=\"None\"\n      }\n      else if(input$\"radio_reputation\"==\"simple\")\n      {\n        temp_reputation=\"Simple Penalty\"\n      }\n      else if(input$\"radio_reputation\"==\"Soft Penalty\")\n      {\n        temp_reputation=\"Soft Penalty\"\n      }\n      else\n      {\n        temp_reputation=\"Hard Penalty\"\n      }\n      NLCommand(paste(\"set\",\"reputation-algorithm\", shQuote(temp_reputation))) \n      NLCommand(paste(\"set\",\"use-cut-worker-by-penalty?\", input$checkbox_cut )) \n      NLCommand(paste(\"set\",\"cut-worker-per-round\", input$slider_cutperround)) \n      \n      \n      ##setup penalty\n      NLCommand(paste(\"set\",\"show-penalty?\", input$checkbox_penalty )) \n      \n      \n      ##call setup in netlogo\n      NLCommand(\"setup\") \n      setup.patches()\n      setup.datacenters()\n      setup.workers()\n    }\n  \n    ##call go in netlogo\n    go <- function(){\n      NLCommand(\"go\") \n      NLCommand(\"if ticks mod flood-tick = 0 and ticks > 0[setup-flood]\")\n      NLCommand(paste(\"if ticks mod flood-tick = 0 and ticks > 0[\",setup.border(),\"]\"))\n      NLCommand(\"toggle-penalty\")\n      NLCommand(\"tick\")\n    }\n    \n   \n})\n",
    "created" : 1455875367311.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "15|29|61|4|\n63|31|68|4|\n71|38|75|4|\n104|23|116|4|\n118|23|128|4|\n130|24|228|4|\n231|21|237|4|\n",
    "hash" : "1625685912",
    "id" : "26A84AAB",
    "lastKnownWriteTime" : 1455875991,
    "path" : "C:/Users/Ongz/Desktop/Project/MaRCS/Program/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}