{
    "contents" : "require(jsonlite)\n\nreadjson<-function()\n{\n  flood <<- fromJSON(\"flooddata.json\", flatten=TRUE)\n  flood <<- flood[[2]]\n  flood$properties.height <<- as.numeric(flood$properties.height)\n}\n\nrun <- function(){\n  library(maps)\n  \n  floodcut<-!((flood$properties.user==\"\" | flood$properties.user == \"citizen\"))\n  floodcut2<<-flood[floodcut,]\n  map(\"world\",\"Philippines\" ,fill=TRUE, col=\"white\", bg=\"lightblue\")\n  x <<- sapply(floodcut2$geometry.coordinates, function(x) x[1])\n  y <<- sapply(floodcut2$geometry.coordinates, function(x) x[2])\n  \n  library(rgdal)\n  webcoor<-SpatialPoints(cbind(x,y), proj4string=CRS(\"+init=epsg:3857\"))\n  longlatcoor<-spTransform(webcoor,CRS(\"+proj=longlat\"))\n  v <<- attr(longlatcoor, \"coords\")\n  points(v[,1],v[,2], col=\"red\", pch=16)\n  \n}\n\n#cutx <- seq(min(x),max(x),length.out = size.x)\n#cuty <- seq(min(y),max(y),length.out = size.y)\n\nseperatemap<-function(size.x, size.y)\n{\n  library(ggplot2)\n  \n  gdiff.x <- (max(x) - min(x)) / size.x\n  gdiff.y <- (max(y) - min(y)) / size.y\n  \n  floodcut3 <<- floodcut2\n  \n  floodcut3$x <<- x\n  floodcut3$y <<- y\n  floodcut3$group.x <<- ceiling(((x - min(x)) / gdiff.x))\n  floodcut3$group.y <<- ceiling(((y - min(y)) / gdiff.y))\n  \n  #set min&max value\n  floodcut3$group.x[floodcut3$group.x == 0] <<- 1\n  floodcut3$group.y[floodcut3$group.y == 0] <<- 1\n  \n  #aggregate(properties.user ~ group.x + group.y, data = floodcut3, length)\n  \n  floodavg <<- aggregate(properties.height ~ group.x + group.y, data = floodcut3, mean)\n  floodavg$properties.height <<- round(floodavg$properties.height)\n  \n  ggplot(data=floodavg, aes(group.x,group.y)) + geom_tile(aes(fill=properties.height)) +\n    scale_fill_gradient(low=\"#dddddd\", high = \"#0088db\", name = 'Floods') +\n    geom_text(data=floodavg, aes(group.x,group.y, label = properties.height)) +\n    scale_x_continuous(breaks = NULL) +\n    scale_y_continuous(breaks = NULL) +\n    xlab('') +\n    ylab('') \n}\n\nseperateline <-function(size.x = 4, size.y = 4){\n  plot(v[,1],v[,2], col=\"red\", pch=16)\n  abline(v = seq(min(v[,1]), max(v[,1]), length.out = size.x+1)[-c(1,size.x+1)])\n  abline(h = seq(min(v[,2]), max(v[,2]), length.out = size.y+1)[-c(1,size.y+1)])\n}\n",
    "created" : 1455874377607.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "830977552",
    "id" : "F857C7F6",
    "lastKnownWriteTime" : 1455874451,
    "path" : "~/R/readjson.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : true,
    "type" : "r_source"
}