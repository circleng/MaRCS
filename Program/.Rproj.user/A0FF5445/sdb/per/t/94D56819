{
    "contents" : "require(shiny)\nrequire(shinydashboard)\nrequire(ggplot2)\nrequire(RNetLogo)\nsource(\"result.R\")\n\nwd = getwd()\n\nshinyServer(function(input, output, session) {\n    values <- reactiveValues(block = 0, percent = 0, counter = 0, vec = c(), vec2 = c(), oldvec = c())\n    p <- reactiveValues(correctness = c()\n                        , avg.correctness = c()\n                        , image = c())\n    \n    ##output UI [right]\n    output$main <-renderUI({\n    ##same CSS\n    ##in summary case\n    \n    list(\n      fluidRow(\n        box(width = 4, \n            title = \"Worker Setting\",\n            height = \"490\",\n            status = \"primary\",\n            solidHeader = TRUE,\n            collapsible = FALSE,\n                 sliderInput(\"slider_numworker\", label = \"Number of Workers\", min = 0, max = 100, value = 100),\n                 sliderInput(\"slider_norprob\", label = \"Probability of Workers to Answer Correctly\", min = 0, max = 100, value = 100),\n                 sliderInput(\"slider_ratioadver\", label = \"Ratio of Adversarial Workers\", min = 0, max = 100, value = 0),\n                 radioButtons(\"radio_advertype\", label = \"Adversarial Worker Types\",\n                              choices = list(\"Fixed-Answer Adversary : Normal\" = \"type1nor\", \"Fixed-Answer Adversary : Flood\" = \"type1flood\", \"Random Adversary\"= \"type2\" ,\"Perfect Adversary\" = \"type3\"), \n                              selected = \"type3\")\n               \n        ),\n        \n        box(width = 4,\n            title = \"Problem Setting\",\n            height = \"490\",\n            status = \"primary\",\n            solidHeader = TRUE,\n            collapsible = FALSE,\n                 radioButtons(\"radio_problemtype\", label = \"Problem Type\",\n                              choices = list(\"Fixed-Problem : Normal\" = \"fixnor\", \"Fixed-Problem : Flood\" = \"fixflood\",\"Random Problem\" = \"random\", \"Real Problem\"= \"real\"), \n                              selected = \"fixnor\"),\n                 sliderInput(\"slider_x\", label = \"X-axis of Area\", min = 1, max = 20, value = 1),\n                 sliderInput(\"slider_y\", label = \"Y-axis of Area\", min = 1, max = 20, value = 1),\n                 radioButtons(\"radio_level\", label = \"Level of Problem Label\",\n                              choices = list(\"2 Level\" = \"2level\", \"3 Level\" = \"3level\"), \n                              selected = \"2level\")\n        ),\n        \n        box(width = 4,\n            title = \"Datacenter Setting\",\n            height = \"490\",\n            status = \"primary\",\n            solidHeader = TRUE,\n            collapsible = FALSE,\n                 radioButtons(\"radio_datafusion\", label = \"Data Fusion\",\n                              choices = list(\"Majority Voting\" = \"mv\", \"EM Algorithm\" = \"em\"), \n                              selected = \"mv\"),\n                 \n                 radioButtons(\"radio_reputation\", label = \"Reputaion Management\",\n                              choices = list(\"None\" = \"none\",\"Simple Penalty\" = \"simple\", \"Soft Penalty\" = \"soft\",\"Hard Penalty\" = \"hard\"), \n                              selected = \"none\"),\n                 \n                 checkboxInput(\"checkbox_cut\", label = \"Do you want to cut workers when process?\", value = TRUE),\n                 \n                 uiOutput(\"slide1\"),\n                 \n                 checkboxInput(\"checkbox_penalty\", label = \"Do you want to see penalty?\", value = TRUE)) \n      ),\n      fluidRow(\n        column(12,align = \"center\",\n               actionButton(\"action_reset\", label = \"Reset\", icon = icon(\"refresh\")),\n               actionButton(\"action_start\", label = \"Start Now\", icon = icon(\"arrow-right\")),\n               checkboxInput(\"viewupdate\", label = \"View Update?\", value = TRUE)\n               )\n      )\n    )\n  })\n    \n    output$slide1 <- renderUI({\n      if(input$checkbox_cut == TRUE){\n        \n        sliderInput(\"slider_cutperround\", label = \"Number of Cut Worker Per Round\", min = 0, max = 50, value = 5, post = \"%\")\n      }\n    })\n    \n    output$grid <- renderUI({\n      list( \n        valueBoxOutput(\"progressBox\"),\n        fluidRow(\n          tabBox(width = 12, \n                 id = \"plottab\",   \n                 title = \"Output Plot\",\n                 tabPanel(\"Correctness\",\n                          fluidRow(       \n                            column(6,\n                                   plotOutput(\"plot1\")\n                            ),\n                            column(6,\n                                   plotOutput(\"plot2\")\n                            )\n                          )\n                 ),\n                 tabPanel(\"Current View\", \n                            fluidRow(align = \"center\",      \n                              column(12,\n                                     imageOutput(\"view\")\n                              )\n                            )),\n                 tabPanel(\"Compare Grid\", \n                          fluidRow(align = \"center\",      \n                                   column(6,\n                                          plotOutput(\"gridplot1\")\n                                   ),\n                                   column(6,\n                                          plotOutput(\"gridplot2\")\n                                   )\n                          ))\n          )\n        )\n      )\n    })\n    \n    output$dash <- renderUI({\n      fluidRow(  \n        tabBox(width = 12, \n               id = \"dashtab\",   \n               title = \"Result Plot\",\n               tabPanel(\"Data Fusion\",\n                        fluidRow(       \n                          column(6,\n                                 plotOutput(\"plot3\")\n                          ),\n                          column(6,\n                                 plotOutput(\"plot4\")\n                          )\n                       ),\n                       fluidRow(       \n                         column(6,\n                                plotOutput(\"plot5\")\n                         ),\n                         column(6,\n                                plotOutput(\"plot6\")\n                         )\n                       )\n               ),\n               tabPanel(\"Reputation Management\",\n                        fluidRow(       \n                          column(6,\n                                 plotOutput(\"plot7\")\n                          ),\n                          column(6,\n                                 plotOutput(\"plot8\")\n                          )\n                        ),\n                        fluidRow(       \n                          column(6,\n                                 plotOutput(\"plot9\")\n                          ),\n                          column(6,\n                                 plotOutput(\"plot10\")\n                          )\n                        ),\n                        fluidRow(       \n                          column(6,\n                                 plotOutput(\"plot11\")\n                          ),\n                          column(6,\n                                 plotOutput(\"plot12\")\n                          )\n                        ),\n                        fluidRow(       \n                          column(6,\n                                 plotOutput(\"plot13\")\n                          ),\n                          column(6,\n                                 plotOutput(\"plot14\")\n                          )\n                        )\n               )\n        )\n      )\n    })\n    \n    output$progressBox <- renderValueBox({\n      if(values$percent != 100){\n        valueBox(\n          paste0(values$percent, \"%\"), \"Progress\",\n          color = \"purple\"\n        )\n      }\n      else{\n        valueBox(\n          paste0(values$percent, \"%\"), \"Success\", icon = icon(\"check\"),\n          color = \"green\"\n        )\n      }\n    })\n    \n    \n   \n    output$plot1 <- renderPlot({\n      if(length(p$correctness) == 0){\n        plot <- ggplot() + geom_blank() \n      }\n      else{\n        df <- data.frame(p$correctness, 1:length(p$correctness))\n        plot <- ggplot(data = df, aes(x = df[,2], y = df[,1])) + geom_line()\n      }\n        \n      plot + xlim(1,48) + ylim(0,100) + \n        ggtitle(\"Correctness Plot\") + xlab(\"Time\") + ylab(\"Correctness\") +\n        theme_bw() +\n        theme(\n          line = element_line(colour = \"blue\", size = 1.2)\n        )\n    })\n    \n    output$plot2 <- renderPlot({\n      if(length(p$correctness) == 0){\n        plot <- ggplot() + geom_blank() \n      }\n      else{\n        df <- data.frame(p$avg.correctness, 1:length(p$avg.correctness))\n        plot <- ggplot(data = df, aes(x = df[,2], y = df[,1])) + geom_line()\n      }\n      \n      plot + xlim(1,48) + ylim(0,100) + \n        ggtitle(\"Average Correctness Plot\") + xlab(\"Time\") + ylab(\"Average Correctness\") +\n        theme_bw()\n    })\n    \n    output$plot3 <- renderPlot({\n      test2()\n      test3()\n      s1()\n    })\n    \n    output$plot4 <- renderPlot({\n      test7()\n      test10()\n      s2()\n    })\n    \n    output$plot5 <- renderPlot({\n      test8()\n      test11()\n      s3()\n    })\n    \n    output$plot6 <- renderPlot({\n      test9.1()\n      test12()\n      s4()\n    })\n    \n    output$plot7 <- renderPlot({\n      test5()\n    })\n    \n    output$plot8 <- renderPlot({\n      test6()\n    })\n    \n    output$plot9 <- renderPlot({\n      test13()\n    })\n    \n    output$plot10 <- renderPlot({\n      test14()\n    })\n    \n    output$plot11 <- renderPlot({\n      test15()\n    })\n    \n    output$plot12 <- renderPlot({\n      test16()\n    })\n    \n    output$plot13 <- renderPlot({\n      test17()\n    })\n    \n    output$plot14 <- renderPlot({\n      test18()\n    })\n    \n    output$view <- renderImage({\n      list(\n        src = normalizePath(p$image)\n      )\n    })\n    \n    output$gridplot1 <- renderPlot({\n      separatemap(p$oldvec)\n    })\n    \n    output$gridplot2 <- renderPlot({\n      separatemap(p$vec2)\n    })\n    \n    ##start button\n    observeEvent(input$action_start, {\n      updateTabItems(session, \"tabs\", \"grid\")\n      init()\n      main()\n      values$count <- 0\n      values$block <- 1\n    })\n    \n    observeEvent(values$percent, {\n      if(values$percent == 100){\n        values$block <- 0\n      }\n    })\n    \n    ##graph + image\n    observe({\n      if(input$tabs == \"setpara\"){\n        shinyjs::disable(\"radio_level\")\n      }\n      \n       if(!is.null(input$plottab) & values$block ==  1){\n          isolate({\n            \n            if(input$viewupdate){\n              go(1)\n            } \n            else{\n              NLCommand(\"no-display\")\n              go(30)\n            }\n            \n            if(input$viewupdate & input$plottab == \"Correctness\"){\n              if(NLReport(\"ticks\") %% 30 == 1 & NLReport(\"ticks\") != 1){\n                p$correctness <- c(p$correctness ,NLReport(\"correctness\"))\n                p$avg.correctness <- c(p$avg.correctness,NLReport(\"sum-correctness / floor(ticks / update-ticks)\"))\n              }\n            } \n            if(!input$viewupdate & input$plottab == \"Correctness\"){\n              p$correctness <- c(p$correctness ,NLReport(\"correctness\"))\n              p$avg.correctness <- c(p$avg.correctness,NLReport(\"sum-correctness / floor(ticks / update-ticks)\"))\n            }\n\n            \n            #Grid\n            if(input$plottab == \"Compare Grid\"){\n              p$oldvec <- p$vec\n              \n              vec <- c()\n              vec2 <- c()\n              for(i in 1:(area[1]*area[2])){\n                vec <- c(vec,NLReport(paste(\"first [true-label] of patches with [road-num = \", i,\"]\")))\n                vec2 <- c(vec2,NLReport(paste(\"[generate-label] of datacenter\", i)))\n              }\n              p$vec <- vec\n              p$vec2 <- vec2\n            }\n            \n            #View\n            toggle(condition = input$viewupdate, selector = \"#plottab li a[data-value=View]\")\n            \n            if(input$plottab == \"Current View\"){\n              path <- paste(wd, \"images\", paste(NLReport(\"ticks\"),\"png\",sep = \".\"), sep = \"/\")\n              NLCommand(paste(\"export-view\",shQuote(path)))\n              p$image <- path\n            }\n            \n            values$percent <- round(NLReport(\"ticks\") / 1441 * 100,2) \n          })\n       }   \n      \n      if (isolate(values$counter) < 1441){\n        invalidateLater(0, session)\n      }\n    })    \n        \n    #reset buuton\n    observeEvent(input$action_reset, {\n        shinyjs::reset(\"main\")\n    })\n\n    ##run netlogo by R \n    ##start here\n    init <- function(){\n      nlDir <- \"C:/Program Files (x86)/NetLogo 5.2.0\"\n      setwd(nlDir)\n      \n      nl.path <- getwd()\n      tryCatch({(NLStart(nl.path, gui = F))\n      },warning = function(w) {\n        print(\"NetLogo Already Started\")\n      }, error = function(e) {\n        print(\"NetLogo Already Started\")\n      })\n      \n      model.path <- paste(wd,\"marcs.nlogo\",sep = \"/\")\n      NLLoadModel(model.path)\n    }\n    \n    setup <- function(){\n      p$correctness <- c()\n      p$avg.correctness <- c()\n      \n      ##set parameter\n      ##for worker\n      NLCommand(paste(\"set\",\"number-workers\", input$slider_numworker )) \n      NLCommand(paste(\"set\",\"workers-probability\", input$slider_norprob )) \n      NLCommand(paste(\"set\",\"adversaries-rate\", input$slider_ratioadver )) \n      if(input$radio_advertype==\"type1nor\")\n      {\n        temp_advertype <- \"1. fixed : normal\"\n      }\n      else if(input$radio_advertype==\"type1flood\")\n      {\n        temp_advertype <- \"1. fixed : flood\"\n      }\n      else if(input$radio_advertype==\"type2\")\n      {\n        temp_advertype <- \"2. random\"\n      }\n      else\n      {\n        temp_advertype <- \"3. perfect\"\n      }\n      \n      NLCommand(paste(\"set\",\"adversaries-type\", shQuote(temp_advertype))) \n      \n      \n      ##for problem\n      if(input$radio_problemtype==\"fixnor\")\n      {\n        temp_problemtype=\"normal\"\n      }\n      else if(input$radio_problemtype==\"fixflood\")\n      {\n        temp_problemtype=\"flood\"\n      }\n      else if(input$radio_problemtype==\"random\")\n      {\n        temp_problemtype=\"random\"\n      }\n      else\n      {\n        temp_problemtype=\"real\"\n      }\n      NLCommand(paste(\"set\",\"problem-label\", shQuote(temp_problemtype) )) \n      NLCommand(paste(\"set\",\"area.x\", input$slider_x )) \n      NLCommand(paste(\"set\",\"area.y\", input$slider_y ))\n      if(input$radio_level==\"2level\")\n      {\n        temp_level=\"2 Levels\"\n      }\n      else\n      {\n        temp_level=\"3 Levels\"\n      }\n      NLCommand(paste(\"set\",\"label-level\", shQuote(temp_level) )) \n      \n      \n      ##setup datacenter\n      if(input$radio_datafusion==\"mv\")\n      {\n        temp_datafusion=\"Majority Voting\"\n      }\n      else\n      {\n        temp_datafusion=\"EM Algorithm\"\n      }\n      NLCommand(paste(\"set\",\"data-fusion\", shQuote(temp_datafusion) )) \n      if(input$\"radio_reputation\"==\"none\")\n      {\n        temp_reputation=\"None\"\n      }\n      else if(input$\"radio_reputation\"==\"simple\")\n      {\n        temp_reputation=\"Simple Penalty\"\n      }\n      else if(input$\"radio_reputation\"==\"Soft Penalty\")\n      {\n        temp_reputation=\"Soft Penalty\"\n      }\n      else\n      {\n        temp_reputation=\"Hard Penalty\"\n      }\n      NLCommand(paste(\"set\",\"reputation-algorithm\", shQuote(temp_reputation))) \n      NLCommand(paste(\"set\",\"use-cut-worker-by-penalty?\", input$checkbox_cut )) \n      NLCommand(paste(\"set\",\"cut-workers-per-round\", input$slider_cutperround)) \n      \n      \n      ##setup penalty\n      NLCommand(paste(\"set\",\"show-penalty?\", input$checkbox_penalty )) \n      \n      \n      ##call setup in netlogo\n      NLCommand(\"setup\") \n      NLCommand(\"go\") \n    }\n    \n    main <- function(){\n      #parameter setup\n      ##set seperate x,y\n      area <<- c(input$slider_x,input$slider_y)\n      \n      setup()\n      \n      update.ticks <<- NLReport(\"update-ticks\")\n      min.pxcor <<- NLReport(\"min-pxcor\")\n      min.pycor <<- NLReport(\"min-pycor\")\n      max.pxcor <<- NLReport(\"max-pxcor\")\n      max.pycor <<- NLReport(\"max-pycor\")\n    }\n    ##call go in netlogo\n    go <- function(number = 1441){ \n      NLDoCommand(number,\"go\")\n    \n      values$counter <-  values$counter + 1\n    }\n    \n    separatemap <- function(vec){\n      i <- c()\n      j <- c()\n      #1 dim -> 2 dim\n      for(num in 0:(length(vec)-1)){\n        i <- c(i,floor(num / area[1]) + 1)\n        j <- c(j,num %% area[1] + 1)\n      }\n      \n      #NA\n      vec[is.na(vec)] <- 2\n      df <- data.frame(i,j,vec)\n      \n      ggplot(data=df, aes(i,j)) + geom_tile(aes(fill=vec)) +\n        scale_fill_gradient(limits=c(0, 1),low=\"#0088db\", high = \"#dddddd\", name = 'Floods') +\n        geom_text(data=df, aes(i,j, label = vec)) +\n        scale_x_continuous(breaks = NULL) +\n        scale_y_continuous(breaks = NULL) +\n        xlab('') +\n        ylab('') \n    }\n})\n",
    "created" : 1456994190330.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2877851769",
    "id" : "94D56819",
    "lastKnownWriteTime" : 1456111683,
    "path" : "C:/Users/Ongz/Desktop/Project/MaRCS/Program/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}